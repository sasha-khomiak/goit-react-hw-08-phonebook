{"version":3,"file":"static/js/409.91bc4557.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","redux/contacts/contactsSelectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/ContactsView.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  list-style: none;\n  padding: 0;\n  /* display: flex;\n  flex-direction: column;\n  gap: 30px; */\n  /* align-items: center; */\n`;\n\nexport const Li = styled.li`\n  display: flex;\n  /* flex-direction: column; */\n  /* gap: 30px; */\n  /* align-items: center; */\n  padding: 10px;\n\n  :nth-child(2n-1) {\n    background-color: #d4d4d4;\n  }\n`;\n\nexport const Name = styled.p`\n  font-weight: bold;\n  margin-right: 10px;\n`;\n\nexport const Button = styled.button`\n  width: 100px;\n  height: 40px;\n\n  background-color: #2196f3;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 10px;\n  border-width: 0;\n\n  font-weight: 700;\n  font-size: 16px;\n  line-height: calc(30 / 16);\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  letter-spacing: 0.06em;\n\n  color: #ffffff;\n\n  cursor: pointer;\n\n  transition: background-color 250ms linear, transform 250ms linear;\n\n  align-self: center;\n\n  margin-left: auto;\n\n  :hover {\n    background-color: #5ab1f8;\n    transform: scale(1.1);\n  }\n`;\n","//селектори в контактах\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\n//селектори в фільтрі\nexport const selectFilter = state => state.filter;\n\n//селектор відфільтрованих контактів\nexport const selectFilteredContacts = state => {\n  // Використовуємо інші селектори контатків фільтру\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n  // Повертаємо відфільтровані контакти\n  return contacts.filter(item =>\n    item.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase().trim())\n  );\n};\n","// стилізовані компоненти\nimport { Ul, Li, Name, Button } from './ContactList.styled';\n\n// бібліотека Dispatch для відправки екшенів на редʼюс і запису в стейт\n// бібліотека useSelector для отримання даних з глобального стейту для верстки\nimport { useDispatch, useSelector } from 'react-redux';\n\n// функція формування екщена для видалення контакту\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\n// селектори для стейту стану контактів (завантаження, відфільтрований результат, помилка)\nimport {\n  selectIsLoading,\n  selectError,\n  selectFilteredContacts,\n} from 'redux/contacts/contactsSelectors';\n\n// useEffect для оновлення сontacts при їх зміні\nimport { useEffect } from 'react';\n\n// операція отримання контатків\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\n\n// операції авторизації\nimport authOperations from 'redux/auth/authOperations';\n\n// наш компонент\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  // оновлення сontacts при їх зміні\n  useEffect(() => {\n    dispatch(authOperations.fetchCurrentUser());\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // значення стейт завантаження і помилки\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  // відфільтровані контакти\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  // верстка компонента\n  // Якщо завантаження - Loading tasks...\n  // Якщо помилка з бекенду - повідомлення\n  // якщо в масиві хоча б одне значення, то виводимо\n  return (\n    <>\n      {isLoading && <p>Loading tasks...</p>}\n      {error && <p>{error}</p>}\n\n      {filteredContacts.length > 0 && (\n        <Ul>\n          {filteredContacts.map(item => {\n            return (\n              <Li key={item.id}>\n                <Name>{item.name}: </Name> <p>{item.number}</p>\n                <Button\n                  type=\"button\"\n                  onClick={() => dispatch(deleteContact(item.id))}\n                >\n                  Delete\n                </Button>\n              </Li>\n            );\n          })}\n        </Ul>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  /* align-items: center; */\n`;\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  gap: 10px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled.input`\n  border-radius: 10px;\n  width: 140px;\n  height: 20px;\n  /* border: none;\n  outline: none; */\n  /* outline: 2px solid tomato; */\n\n  padding: 10px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n`;\n\nexport const Button = styled.button`\n  width: 200px;\n  height: 40px;\n\n  background-color: #2196f3;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 10px;\n  border-width: 0;\n\n  font-weight: 700;\n  font-size: 16px;\n  line-height: calc(30 / 16);\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  letter-spacing: 0.06em;\n\n  color: #ffffff;\n\n  cursor: pointer;\n\n  transition: background-color 250ms linear, transform 250ms linear;\n\n  align-self: center;\n\n  :hover {\n    background-color: #5ab1f8;\n    transform: scale(1.1);\n  }\n`;\n","//підключення використання хуків коли не глобальний стейт юзаємо для контрольованих інпутів\nimport { useState } from 'react';\n\n// стилізовані компоненти\nimport { Input, Label, Button, Form, Wrap } from './ContactForm.styled';\n\n// бібліотека Dispatch для відправки екшенів на редʼюс і запису в стейт\n// бібліотека useSelector для отримання даних з глобального стейту для верстки\nimport { useDispatch, useSelector } from 'react-redux';\n\n// седектор вибору контакта\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\n// функція формування екшена додавання контакту\nimport { addContact } from 'redux/contacts/contactsOperations';\n\n// наш функціональний компонент\nexport default function ContactForm() {\n  //dispatch для відправки екшенів на редʼюс в результаті чого записується стейт\n  const dispatch = useDispatch();\n\n  // Глобальний стейт наших контактів\n  const contacts = useSelector(selectContacts);\n\n  // локальні стейти для контрольованих інпутів у формі\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  // контрольовані інпути. реагуємо на івент\n  // беремо нейм каррент таргет  і світч-кейс оновлюємо значення стейту\n  const handleChangeInput = e => {\n    switch (e.currentTarget.name) {\n      case 'name':\n        setName(e.currentTarget.value);\n        break;\n      case 'phone':\n        setPhone(e.currentTarget.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  // при сабміті форми прівент дефолт\n  // створюємо обʼєкт контакту\n  // робимо перевірку чи унікальне імʼя\n  // якшо імʼя не унікальне то виводимо повідомлення\n  // якшо імʼя унікальне то викликаємо екшин addContact\n  // і передаємо в нього обʼєкт контакту і кидаємр в диспатч\n  // (а там уже оновлюється глобальний стетй)\n  // скидаємо значення імені і номера\n  const onSubmitForm = e => {\n    e.preventDefault();\n    const newContact = {\n      // id: nanoid(5),\n      name,\n      number: phone,\n    };\n    if (checkNewNameRepeate(name)) {\n      alert(`${name} is already in contacts!`);\n    } else {\n      dispatch(addContact(newContact));\n      setName('');\n      setPhone('');\n    }\n  };\n\n  //перевірка чи є контакт з таким іменем з врахуванням різних регістрів\n  // повертає true або false\n  const checkNewNameRepeate = newName => {\n    let arrayOfNamesInLowerCase = contacts.map(item =>\n      item.name.toLocaleLowerCase()\n    );\n    return arrayOfNamesInLowerCase.includes(newName.toLocaleLowerCase());\n  };\n\n  // розмітка форми\n  return (\n    <Form onSubmit={onSubmitForm}>\n      <Wrap>\n        <Label>\n          Name:\n          <Input\n            type=\"text\"\n            name=\"name\"\n            // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChangeInput}\n          />\n        </Label>\n        <Label>\n          Phone:\n          <Input\n            type=\"tel\"\n            name=\"phone\"\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={phone}\n            onChange={handleChangeInput}\n          />\n        </Label>\n      </Wrap>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  border-radius: 10px;\n  width: 200px;\n  height: 20px;\n  /* border: none;\n  outline: none; */\n  /* outline: 2px solid tomato; */\n\n  padding: 10px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n`;\n","// Імпортуємо стилізований компонент\nimport { Input } from './Filter.styled';\n\n// useSelector для отримання глобального стейту фільтра\n// useDispatch для прокидання екшену в редʼюс і запису в стейт\nimport { useSelector, useDispatch } from 'react-redux';\n\n// функція формування екшен перезапису фільтра в стейті\nimport { editFilter } from 'redux/filter/filterSlice';\n\n// селектор для фільтра\nimport { selectFilter } from 'redux/contacts/contactsSelectors';\n\n// компонент Filter\nconst Filter = () => {\n  //отримаємо значення голбального стейту параметра filter\n  const value = useSelector(selectFilter);\n  // dispatch для закидання для редʼюса обʼєкта екшена\n  const dispatch = useDispatch();\n\n  // ф-ія обробник зміни в інпуті фільтра\n  //перезаписує значення filter в глобальному стейті при кожному виникненні екшена\n  const handleChangeFilter = e => {\n    dispatch(editFilter(e.currentTarget.value));\n  };\n\n  return (\n    <>\n      <Input onChange={handleChangeFilter} value={value} />\n    </>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\n\n// імпорт стилізованих компонентів для App (тільки контейнер)\nimport { Container } from 'components/App.styled';\n\n// імпорт компонентів\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\n\nconst ContactsView = () => {\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default ContactsView;\n"],"names":["Ul","styled","Li","Name","Button","selectContacts","state","contacts","selectError","error","selectIsLoading","isLoading","selectFilter","filter","selectFilteredContacts","item","name","toLocaleLowerCase","includes","trim","dispatch","useDispatch","useEffect","authOperations","fetchContacts","useSelector","filteredContacts","length","map","number","type","onClick","deleteContact","id","Form","Wrap","Label","Input","ContactForm","useState","setName","phone","setPhone","handleChangeInput","e","currentTarget","value","checkNewNameRepeate","newName","onSubmit","preventDefault","newContact","alert","addContact","title","required","onChange","editFilter"],"sourceRoot":""}